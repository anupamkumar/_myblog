<doc><title>Why Ellen's Tweet broke twitter</title><author>Anupam</author><publishdate>Published On March 4th, 2014</publishdate><body>&lt;h4&gt;On March 2nd - Oscar's - &lt;a href=&quot;https://twitter.com/TheEllenShow/status/440322224407314432&quot;&gt;This tweet&lt;/a&gt; - was retweeted 3 million times and broke the world record of the highest retweeted post of all time! And in the process broke Twitter. With the 10 year mature architecture on them - Anyone's first question would be - Why ?&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let's break the scenario down and take a closer look&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is Twitter's architecture&lt;br/&gt;&lt;div style=&quot;border:1px solid;&quot;&gt;&lt;img src=&quot;http://farm6.staticflickr.com/5481/9235686327_fcd0d89837_o.png&quot; alt=&quot;twitter architecture&quot; /&gt;&lt;br/&gt;&lt;small&gt;image src:&lt;a href=&quot;http://www.flickr.com/photos/13733851@N00/9235686327/sizes/o/in/photostream/.&quot;&gt;http://www.flickr.com/photos/13733851@N00/9235686327/sizes/o/in/photostream/&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;&lt;br/&gt;
When you write a tweet on twitter, twitter does the following processing:
&lt;ul&gt;&lt;li&gt;&lt;ol&gt;&lt;li&gt;Ingest&lt;/li&gt;&lt;li&gt;Fanout&lt;/li&gt;&lt;/ol&gt;parallely&lt;/li&gt;&lt;li&gt;The ingestion module is responsible for storing and indexing the tweet for search purposes&lt;/li&gt;&lt;li&gt;The fanout module is responsible for figuring out where should the tweet go (i.e timelines of followers, timelines of followers of followers who retweeted etc)&lt;/li&gt;&lt;li&gt;&lt;i&gt;At this point it is important to note that tweeter aims to be a real-time content-delivery system. i.e It want's that everyone who needs to know about a tweet should know it within &lt;a href=&quot;https://dev.twitter.com/discussions/8020&quot;&gt;5 seconds&lt;/a&gt;&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Ellen has 27.3Million followers. And when she tweets something, The fan-out module needs to deliver (write) her tweet to 27.3Million accounts. And at the same time, the push compute module needs to push the tweet to every device of those 27.3Million account.&lt;li&gt;Let us assume that:&lt;ol&gt;&lt;li&gt;Each follower has 3 devices on which they are logged into twitter&lt;/li&gt;&lt;li&gt;Each Ellen follower has 100 followers &lt;/li&gt;&lt;li&gt;A user retweeted this tweet only once.&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;This means that when 3million people retweeted, twitter needed to send this tweet to 27,3M*3 + 3M*100*3 unique locations on the internet = 981 million 900 thousand ~ 982 million &lt;em&gt;&lt;b&gt;Within 5 seconds&lt;/b&gt;&lt;/em&gt;&lt;/li&gt;&lt;li&gt;The size of the image Ellen tweeted was ~80KB. and I assume that the text &quot;best selfie ever&quot; is negligible to the photo size so I am not going to take that into account&lt;/li&gt;&lt;li&gt;So, the total amount of data that redis and push compute needed to dispatch was ~78 Terabytes. &lt;/li&gt;&lt;li&gt;Figured out where the system would have failed ?&lt;/li&gt;&lt;li&gt;&lt;i&gt;Now before you freak-out by the volume and say, &quot;how can tweeter even do this ?&quot;&lt;/i&gt; Understand that the the architecture represents the logical outline and the physical deployment of twitter has server-farms distributed across the geography and millions of servers will be delivering the content in parallel. So this delivering 78 Terabytes in ~5 seconds is doable. Let me explain...&lt;/li&gt;&lt;li&gt;The best Open-source Message Queue -RabbitMQ can push approximately 2000 100KB messages a second. &lt;br/&gt;&lt;div style=&quot;border:1px solid;&quot;&gt;&lt;img src=&quot;http://blogs.vmware.com/vfabric/files/2013/04/sending-rate-message-sizes.png&quot;/&gt;&lt;br/&gt;&lt;small&gt;Image src: &lt;a href=&quot;https://blogs.vmware.com/vfabric/2013/04/how-fast-is-a-rabbit-basic-rabbitmq-performance-benchmarks.html&quot;&gt;https://blogs.vmware.com/vfabric/2013/04/how-fast-is-a-rabbit-basic-rabbitmq-performance-benchmarks.html&lt;/a&gt;&lt;/small&gt;&lt;/div&gt;&lt;br/&gt; &lt;a href=&quot;http://lineofthought.com/tools/rabbitmq&quot;&gt;And twitter uses RabbitMQ&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Ideally, if twitter were to accomplish it's goal of delivering 78TB to 982 million addresses...There needs to be 97,200 instances of Rabbit, delivering the retweet in parallel -- atleast -- Because remember that twitter would be delivering news about Ukraine and other stuff as well at the same time&lt;/li&gt;&lt;/ul&gt;
&lt;p&gt;Spawning atleast 97,200 instances of RabbitMQ across any distributed system Is a ridiculous task to do! And it's not an easy thing to do, by any means. No wonder twitter had to take itself down so that it's queues would finish delivering before taking in more tweets to process.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;
&lt;ol&gt;&lt;li&gt;[https://twitter.com/TheEllenShow/]&lt;/li&gt;&lt;li&gt;[http://lineofthought.com/tools/rabbitmq]&lt;/li&gt;&lt;li&gt;[https://dev.twitter.com/discussions/8020]&lt;/li&gt;&lt;li&gt;[http://www.infoq.com/news/2009/06/Twitter-Architecture]&lt;/li&gt;&lt;li&gt;[http://www.flickr.com/photos/13733851@N00/9235686327/sizes/o/in/photostream/]&lt;/li&gt;&lt;/ol&gt;</body><references></references></doc>