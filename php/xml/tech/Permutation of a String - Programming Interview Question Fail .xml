<doc><title>Permutation of a String - Programming Interview Question Fail </title><author>Anupam Kumar</author><publishdate>31st October , 2014</publishdate><body>&lt;a href=&quot;https://www.youtube.com/user/ProgrammingInterview/videos?view=0&amp;flow=grid&amp;sort=da&quot;&gt;This youtuber&lt;/a&gt;, has compiled a great list of Programming Questions that are worthwhile practicing. 



&lt;p&gt;I was giving it a go myself where I came across the Problem - &lt;b&gt;\&quot;How do write a program to find all Permutations of any Given String\&quot;&lt;/b&gt;



&lt;p&gt;This problem is not straight-forward and when you think about it, the output of the problem grows exponentially in relation to the input of the problem. Eg: if the input of the problem is the String - \&quot;anupam\&quot;. The input size is one String six character long. But the output will be seven twenty (six factorial) strings, each six character long. 



&lt;p&gt;The Youtuber\'s solution was as follows:


&lt;p&gt;&lt;iframe width=\&quot;560\&quot; height=\&quot;315\&quot; src=//www.youtube.com/embed/uPYhYVeXYxM frameborder=\&quot;0\&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;However, The solution is not entirely correct, and it misses a few permutations. This was promptly pointed out by users in the video comments. 



&lt;p&gt;The solution approached the problem in an recursive way, swapping the character\'s in each recursive call and he maintained a counter, which he would pass to the next recursive call. This way he was able to swap and generate the desired solution. The error he made was that when the counter reached the end, he would not have generated all the permutations because there are only &lt;code&gt;n-1&lt;/code&gt; ways you can swap the adjacent characters of the string of length &lt;code&gt;n&lt;/code&gt;. He needed to do this another n times to get the correct result, which he did not. 



&lt;p&gt;I personally, don\'t like Recursion, I never really got the charm. Yeah, you can write you code in 2 lines, what iteration would do in 10, but so what, recursion get optimized to iteration by most modern compilers anyway, because the recursion causes the Function call memory stack to grow very quickly and if the recursion is too large, you are going to go out of memory fast.  



&lt;p&gt;I looked in the comments section for someone to complain about the unreasonable affinity for recursion, but in-vain. There were absolutely no one vouching for an iterative solution to the problem, and I for one was not willing to accept this. So I wrote my iterative solution to the problem in Java.

&lt;link rel=&quot;stylesheet&quot; href=&quot;https://gist-assets.github.com/assets/embed-86ab27ade1f939e1fab0c524268f0497.css&quot;&gt;&lt;br/&gt;&lt;div id=&quot;gist15561286&quot; class=&quot;gist&quot;&gt;        &lt;div class=&quot;gist-file&quot;&gt;          &lt;div class=&quot;gist-data gist-syntax&quot;&gt;                &lt;div class=&quot;file-data&quot;&gt;      &lt;table cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;lines highlight&quot;&gt;        &lt;tr&gt;          &lt;td class=&quot;line-numbers&quot;&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L1&quot; rel=&quot;file-problem6-L1&quot;&gt;1&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L2&quot; rel=&quot;file-problem6-L2&quot;&gt;2&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L3&quot; rel=&quot;file-problem6-L3&quot;&gt;3&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L4&quot; rel=&quot;file-problem6-L4&quot;&gt;4&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L5&quot; rel=&quot;file-problem6-L5&quot;&gt;5&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L6&quot; rel=&quot;file-problem6-L6&quot;&gt;6&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L7&quot; rel=&quot;file-problem6-L7&quot;&gt;7&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L8&quot; rel=&quot;file-problem6-L8&quot;&gt;8&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L9&quot; rel=&quot;file-problem6-L9&quot;&gt;9&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L10&quot; rel=&quot;file-problem6-L10&quot;&gt;10&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L11&quot; rel=&quot;file-problem6-L11&quot;&gt;11&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L12&quot; rel=&quot;file-problem6-L12&quot;&gt;12&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L13&quot; rel=&quot;file-problem6-L13&quot;&gt;13&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L14&quot; rel=&quot;file-problem6-L14&quot;&gt;14&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L15&quot; rel=&quot;file-problem6-L15&quot;&gt;15&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L16&quot; rel=&quot;file-problem6-L16&quot;&gt;16&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L17&quot; rel=&quot;file-problem6-L17&quot;&gt;17&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L18&quot; rel=&quot;file-problem6-L18&quot;&gt;18&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L19&quot; rel=&quot;file-problem6-L19&quot;&gt;19&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L20&quot; rel=&quot;file-problem6-L20&quot;&gt;20&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L21&quot; rel=&quot;file-problem6-L21&quot;&gt;21&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L22&quot; rel=&quot;file-problem6-L22&quot;&gt;22&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L23&quot; rel=&quot;file-problem6-L23&quot;&gt;23&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L24&quot; rel=&quot;file-problem6-L24&quot;&gt;24&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L25&quot; rel=&quot;file-problem6-L25&quot;&gt;25&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L26&quot; rel=&quot;file-problem6-L26&quot;&gt;26&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L27&quot; rel=&quot;file-problem6-L27&quot;&gt;27&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L28&quot; rel=&quot;file-problem6-L28&quot;&gt;28&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L29&quot; rel=&quot;file-problem6-L29&quot;&gt;29&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L30&quot; rel=&quot;file-problem6-L30&quot;&gt;30&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L31&quot; rel=&quot;file-problem6-L31&quot;&gt;31&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L32&quot; rel=&quot;file-problem6-L32&quot;&gt;32&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L33&quot; rel=&quot;file-problem6-L33&quot;&gt;33&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L34&quot; rel=&quot;file-problem6-L34&quot;&gt;34&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L35&quot; rel=&quot;file-problem6-L35&quot;&gt;35&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L36&quot; rel=&quot;file-problem6-L36&quot;&gt;36&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L37&quot; rel=&quot;file-problem6-L37&quot;&gt;37&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L38&quot; rel=&quot;file-problem6-L38&quot;&gt;38&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L39&quot; rel=&quot;file-problem6-L39&quot;&gt;39&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L40&quot; rel=&quot;file-problem6-L40&quot;&gt;40&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L41&quot; rel=&quot;file-problem6-L41&quot;&gt;41&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L42&quot; rel=&quot;file-problem6-L42&quot;&gt;42&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L43&quot; rel=&quot;file-problem6-L43&quot;&gt;43&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L44&quot; rel=&quot;file-problem6-L44&quot;&gt;44&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L45&quot; rel=&quot;file-problem6-L45&quot;&gt;45&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L46&quot; rel=&quot;file-problem6-L46&quot;&gt;46&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L47&quot; rel=&quot;file-problem6-L47&quot;&gt;47&lt;/span&gt;            &lt;span class=&quot;line-number&quot; id=&quot;file-problem6-L48&quot; rel=&quot;file-problem6-L48&quot;&gt;48&lt;/span&gt;          &lt;/td&gt;          &lt;td class=&quot;line-data&quot;&gt;            &lt;pre class=&quot;line-pre&quot;&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC1&quot;&gt;import java.util.ArrayList;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC2&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC3&quot;&gt;/**&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC4&quot;&gt; * all permutations of a string / char array&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC5&quot;&gt; * @author anupam&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC6&quot;&gt; */&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC7&quot;&gt;public class Problem6 {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC8&quot;&gt;    public static ArrayList&amp;lt;String&amp;gt; allPerms(String str) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC9&quot;&gt;        ArrayList&amp;lt;String&amp;gt; al = new ArrayList&amp;lt;&amp;gt;();&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC10&quot;&gt;        int i=0;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC11&quot;&gt;        al.add(str);&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC12&quot;&gt;        while(i &amp;lt; al.size()) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC13&quot;&gt;            for(int j=0;j &amp;lt; al.get(i).length()-1;j++) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC14&quot;&gt;                String temp = swap(al.get(i),j,j+1);&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC15&quot;&gt;                if(exists(al,temp))&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC16&quot;&gt;                    continue;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC17&quot;&gt;                else&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC18&quot;&gt;                    al.add(temp);&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC19&quot;&gt;            }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC20&quot;&gt;            i++;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC21&quot;&gt;        }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC22&quot;&gt;        return al;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC23&quot;&gt;    }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC24&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC25&quot;&gt;    private static String swap(String s, int i, int j) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC26&quot;&gt;        char[] ch = s.toCharArray();&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC27&quot;&gt;        char temp = ch[i];&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC28&quot;&gt;        ch[i] = ch[j];&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC29&quot;&gt;        ch[j] = temp;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC30&quot;&gt;        return new String(ch);&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC31&quot;&gt;    }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC32&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC33&quot;&gt;    private static boolean exists(ArrayList&amp;lt;String&amp;gt; a, String s) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC34&quot;&gt;        for(String a1 : a) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC35&quot;&gt;            if(s.equals(a1))&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC36&quot;&gt;                return true;            &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC37&quot;&gt;        }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC38&quot;&gt;        return false;&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC39&quot;&gt;    }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC40&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC41&quot;&gt;    public static void main(String[] args) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC42&quot;&gt;        ArrayList&amp;lt;String&amp;gt; perms = allPerms(&amp;quot;123abc&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC43&quot;&gt;        for(String s : perms) {&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC44&quot;&gt;             System.out.println(s);             &lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC45&quot;&gt;        }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC46&quot;&gt;        System.out.println(&amp;quot;Perm Count:&amp;quot;+perms.size());&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC47&quot;&gt;    }&lt;/div&gt;&lt;div class=&quot;line&quot; id=&quot;file-problem6-LC48&quot;&gt;}&lt;/div&gt;&lt;/pre&gt;          &lt;/td&gt;        &lt;/tr&gt;      &lt;/table&gt;    &lt;/div&gt;          &lt;/div&gt;          &lt;div class=&quot;gist-meta&quot;&gt;            &lt;a href=&quot;https://gist.github.com/anupamkumar/5935e9719e119902ef7e/raw/Problem6&quot; style=&quot;float:right&quot;&gt;view raw&lt;/a&gt;            &lt;a href=&quot;https://gist.github.com/anupamkumar/5935e9719e119902ef7e#file-problem6&quot;&gt;Problem6&lt;/a&gt;            hosted with &amp;#10084; by &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;          &lt;/div&gt;        &lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The idea behind this is inspired by the proposed solution by the Original Poster, i.e to create new permutations by swapping adjacent characters. Only, now in my solution, I keep track of what new permutations are formed and add them to a list. 

&lt;br/&gt;

I go through the list trying to create new permutations, if I find any new permutations, I add them to the list. 

&lt;br/&gt;I stop trying to create new permutations when reach the end of the list.

 

&lt;p&gt;The runtime of the implementation is &lt;code&gt;O(n2) &lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; would be the factorial of the length of the string. The space requirement, grows exponentially. 



&lt;p&gt;I personally am happy that I was able to come up with the solution in about 20 minutes. :)



&lt;p&gt;I then set off to find if anyone else on the internet was able to solve this in an iterative manner and boy was I glad that I searched for it. 

&lt;br/&gt;There is this professor at a community college. His name is &lt;i&gt;Dhr. Phillip Paul Fuchs &lt;/i&gt;and he that has published a site called &lt;a href=\&quot;http://quickperm.org\&quot;&gt;QuickPerm.Org&lt;/a&gt; That basically improves my solution and makes it much better. 



I am totally at awe at this implementation and I thank him for coming up with such an efficient solution! You should certainly check out his solution at &lt;a href=\&quot;http://quickperm.org\&quot;&gt;QuickPerm.Org&lt;/a&gt;.

</body><references></references></doc>